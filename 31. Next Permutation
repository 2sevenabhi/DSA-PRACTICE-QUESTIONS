class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n=nums.size();
        int ptr=n-2;

        //  find the pivot
        while (ptr>=0 && nums[ptr]>=nums[ptr + 1]) {
            ptr--;
        }

        // if pivot found find successor
        if (ptr>=0) {
            int j=n-1;
            while (nums[j]<= nums[ptr]) {
                j--;
            }
            swap(nums[ptr], nums[j]);
        }

        // reverse suffix
        reverse(nums.begin()+ptr + 1, nums.end());
    }
};
